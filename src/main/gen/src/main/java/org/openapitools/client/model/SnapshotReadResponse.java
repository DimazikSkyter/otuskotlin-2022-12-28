/*
 * Snapshot service
 * This service api give access to documents
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.IResponse;
import org.openapitools.client.model.ResponseResult;
import org.openapitools.client.model.SnapshotListResponse;
import org.openapitools.client.model.SnapshotMetaDateObject;
import org.openapitools.client.model.SnapshotPermissions;
import org.openapitools.client.model.SnapshotReadResponse;
import org.openapitools.client.model.SnapshotSearchResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SnapshotReadResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-10T23:07:22.555215400+03:00[Europe/Moscow]")
public class SnapshotReadResponse extends IResponse {
  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private SnapshotMetaDateObject metadata;

  public static final String SERIALIZED_NAME_SNAPSHOT = "snapshot";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT)
  private String snapshot;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private Set<SnapshotPermissions> permissions = null;

  public SnapshotReadResponse() {
    this.responseType = this.getClass().getSimpleName();
  }

  public SnapshotReadResponse metadata(SnapshotMetaDateObject metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SnapshotMetaDateObject getMetadata() {
    return metadata;
  }


  public void setMetadata(SnapshotMetaDateObject metadata) {
    this.metadata = metadata;
  }


  public SnapshotReadResponse snapshot(String snapshot) {
    
    this.snapshot = snapshot;
    return this;
  }

   /**
   * Данные snapshot
   * @return snapshot
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Данные snapshot")

  public String getSnapshot() {
    return snapshot;
  }


  public void setSnapshot(String snapshot) {
    this.snapshot = snapshot;
  }


  public SnapshotReadResponse permissions(Set<SnapshotPermissions> permissions) {
    
    this.permissions = permissions;
    return this;
  }

  public SnapshotReadResponse addPermissionsItem(SnapshotPermissions permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new LinkedHashSet<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Set<SnapshotPermissions> getPermissions() {
    return permissions;
  }


  public void setPermissions(Set<SnapshotPermissions> permissions) {
    this.permissions = permissions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnapshotReadResponse snapshotReadResponse = (SnapshotReadResponse) o;
    return Objects.equals(this.metadata, snapshotReadResponse.metadata) &&
        Objects.equals(this.snapshot, snapshotReadResponse.snapshot) &&
        Objects.equals(this.permissions, snapshotReadResponse.permissions) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, snapshot, permissions, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnapshotReadResponse {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    snapshot: ").append(toIndentedString(snapshot)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("responseType");
    openapiFields.add("requestId");
    openapiFields.add("result");
    openapiFields.add("errors");
    openapiFields.add("metadata");
    openapiFields.add("snapshot");
    openapiFields.add("permissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SnapshotReadResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (SnapshotReadResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in SnapshotReadResponse is not found in the empty JSON string", SnapshotReadResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SnapshotReadResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SnapshotReadResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SnapshotReadResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SnapshotReadResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SnapshotReadResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SnapshotReadResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SnapshotReadResponse>() {
           @Override
           public void write(JsonWriter out, SnapshotReadResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SnapshotReadResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SnapshotReadResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SnapshotReadResponse
  * @throws IOException if the JSON string is invalid with respect to SnapshotReadResponse
  */
  public static SnapshotReadResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SnapshotReadResponse.class);
  }

 /**
  * Convert an instance of SnapshotReadResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

